<?php
  
/**
 * implementation of hook_module_implements_alter()
 */
function manualcrop_media_wysiwyg_module_implements_alter(&$implementations, $hook) {
  // see if manualcrop's hook for editing the media forms exists
 if ($hook == 'form_file_entity_add_upload_alter' && isset($implementations['manualcrop'])){
    // if so unset it so we can replace with our own version
    unset($implementations['manualcrop']);
  }
}

/**
 * implementation of hook_form_FORM_ID_alter()
 *
 * alter form file_entity_add_upload from media module
 */
function manualcrop_media_wysiwyg_form_file_entity_add_upload_alter(&$form, &$form_state, $form_id){
  // make sure the file has been added
  if (isset($form['#step']) && $form['#step'] == 4) {
    // if its in media browser for media_wysiwyg, run this custome code, 
    //otherwise invoke the original hook
    //this implementation only displays wysiwyg relevant croping chices in media browser
    //todo: is $form_state['build_info']['args'][0]['id'] == 'media_wysiwyg' really the best way to check?
    if (isset($form_state['#media_browser']) && isset($form_state['build_info']['args'][0]['id']) && $form_state['build_info']['args'][0]['id'] == 'media_wysiwyg') {
      //grab the file object
      $file = $form['#entity'];
      manualcrop_media_wysiwyg_attach_form($form,$form_state,$file);
    }
    else {
       //if another media form, invoke manualcrop's form alter
      manualcrop_form_file_entity_add_upload_alter($form, $form_state);
    }
  }
}

function manualcrop_media_wysiwyg_attach_form(&$form, &$form_state, $file){
  //grab the list of allowed view modes
  $allowed_modes = media_wysiwyg_get_wysiwyg_allowed_view_modes($file);
  //variable to store a list of styles
  $allowed_styles = array();
  //loop over the allowed view modes
  foreach ($allowed_modes as $view_mode => $mode_info){
    //load the display info for the current filetype and view mode
    $displays = file_displays($file->type, $view_mode);
    //if the image style exists, drop it in the array
    if (!empty($displays['file_field_image']['settings']['image_style'])){
      //using the style as key and value eliminates dupes
      $allowed_styles[$displays['file_field_image']['settings']['image_style']] = $displays['file_field_image']['settings']['image_style'];
    }
  }
  //grab the default settings from manualcrop
  $settings = manualcrop_default_widget_settings();
  //set the style list to be the aloowed styles --manualcrop only looks at its own
  $settings['manualcrop_styles_list'] = $allowed_styles;
  
  //create the menu item add-on as in _manualcrop_process_file_entity_form
  // Build the javascript identifier.
  $js_identifier = manualcrop_js_identifier($file);
  
  // Prepare the form.
  manualcrop_croptool_prepare_form($form, $form_state, $js_identifier, $settings);

  // Add the croptool.
  manualcrop_croptool_process($form, $form_state, $js_identifier, $file, NULL, $settings);

  // Add the submit handler.
  $form['#submit'][] = 'manualcrop_croptool_submit';

}



/**
 * todo: this is where a crop button could be added to the "after upload" media broswer format page
 * button is loadable but doesn't save.
 *  media_browser_edit can fill the gap if this can't be made to work
 */
/*
function manualcrop_media_wysiwyg_form_media_format_form_alter(&$form, &$form_state, $form_id){
  dpm($form);
  //dpm($form_state);
  
  //grab the file object
  //neither of these do it.
  //$file = file_load($form['#media']->fid);
  //$file = $form['#media'];
  //manualcrop_media_wysiwyg_attach_form($form, $form_state, $file);
}
*/